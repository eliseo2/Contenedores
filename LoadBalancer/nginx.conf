user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    limit_req_zone $binary_remote_addr zone=myzone:10m rate=10r/s;
    include /etc/nginx/conf.d/*.conf;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    keepalive_timeout 65;

    # Security headers
    server_tokens off;

    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256';
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;

    # Define backend servers
    upstream backend_servers {
        server backend1:5000 fail_timeout=10s max_fails=3;
        server backend2:5000 fail_timeout=10s max_fails=3;
        # Health check (requiere un endpoint /health en tus backends)
        health_check interval=10s uri=/health;
    }

    # HTTP server to redirect to HTTPS
    server {
        listen 80;
        server_name localhost;
        
        # Redirect all HTTP requests to HTTPS
        return 301 https://$host$request_uri;
    }

    # HTTPS server
    server {
        listen 443 ssl;
        server_name localhost;

        # SSL certificates (auto-firmados para desarrollo)
        ssl_certificate /etc/nginx/ssl/nginx.crt;
        ssl_certificate_key /etc/nginx/ssl/nginx.key;

        # Security headers
        add_header X-Frame-Options "SAMEORIGIN";
        add_header X-XSS-Protection "1; mode=block";
        add_header X-Content-Type-Options "nosniff";
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
        add_header Content-Security-Policy "default-src 'self'; connect-src 'self' http://localhost:5000 http://backend:5000 https://localhost;";

        # Rate limiting
        limit_req zone=myzone burst=10 nodelay;

        # Frontend static files
        location / {
            proxy_pass http://frontend:80;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        # Backend API with load balancing
        location /api/ {
            # Si quieres usar HTTPS internamente
            proxy_pass https://backend_servers;
            proxy_ssl_verify off;  # Para certificados autofirmados

            # O mantener HTTP internamente (más común en Docker)
            # proxy_pass http://backend_servers;
            
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Proto $scheme;
        
        # Headers para CORS
        add_header 'Access-Control-Allow-Origin' '$http_origin' always;
        add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE' always;
        add_header 'Access-Control-Allow-Headers' 'Content-Type, Authorization' always;
        add_header 'Content-Security-Policy' "connect-src 'self' http://backend:5000 http://localhost:5000 https://localhost" always;
        
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        }

        # Error pages
        error_page 404 /404.html;
        location = /404.html {
            root /usr/share/nginx/html;
        }

        error_page 500 502 503 504 /50x.html;
        location = /50x.html {
            root /usr/share/nginx/html;
        }
    }
}