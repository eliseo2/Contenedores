
services:
  # Balanceador de carga
  loadbalancer:
    build: ./loadbalancer
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend1
      - backend2
    networks:
      - frontend-network
    restart: unless-stopped

  # Frontend - React
  frontend:
    build: 
      context: ./frontend
      args:
        - REACT_APP_API_URL=/api
    environment:
      - REACT_APP_API_URL=/api
    depends_on:
      - backend1
      - backend2
    networks:
      - frontend-network
    restart: unless-stopped

  # Backend 1
  backend1:
    build: ./backend
    env_file:
      - ./backend/.env
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=db
      - FRONTEND_URL=https://localhost
    depends_on:
      db:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped
    # Limitar recursos para evitar ataques de DoS
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
    # Limitar capacidades del contenedor (seguridad)
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Backend 2 (para balanceo de carga)
  backend2:
    build: ./backend
    env_file:
      - ./backend/.env
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=db
      - FRONTEND_URL=https://localhost
    depends_on:
      db:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped
    # Limitar recursos para evitar ataques de DoS
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M
    # Limitar capacidades del contenedor (seguridad)
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE

  # Base de datos MySQL
  db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: secretpassword
      MYSQL_DATABASE: appdb
      MYSQL_USER: appuser
      MYSQL_PASSWORD: apppassword
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql_data:/var/lib/mysql
    networks:
      - backend-network
    # Limitar acceso a la red frontend
    # Solo accesible desde backend
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uappuser", "-papppassword"]
      interval: 5s
      timeout: 10s
      retries: 10

  # Panel de administración para la base de datos
  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - backend-network
    environment:
      - ADMINER_DEFAULT_SERVER=db
    # Limitar recursos
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  # Panel de administración para Docker
  portainer:
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    # Configuración de seguridad
    security_opt:
      - no-new-privileges:true

# Volúmenes para persistencia de datos
volumes:
  mysql_data:
  portainer_data:

# Redes
networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
    internal: true  # Red interna, no accesible desde el exterior