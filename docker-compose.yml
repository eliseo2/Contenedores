version: '3'

services:
  # Sistema de logs centralizado
  loki:
    container_name: loki
    image: grafana/loki:2.9.2
    ports:
      - "3100:3100"
    volumes:
      - ./loki/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring-network
      - frontend-network
      - backend-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M

  promtail:
    container_name: promtail
    image: grafana/promtail:2.9.2
    volumes:
      - ./loki/promtail-config.yaml:/etc/promtail/config.yaml
      - /var/run/docker.sock:/var/run/docker.sock
      # Updated path for Windows Docker Desktop
      - /mnt/c/ProgramData/Docker/containers:/var/lib/docker/containers:ro
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - monitoring-network
      - frontend-network
      - backend-network
    depends_on:
      - loki
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./loki/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/loki-datasource.yaml:ro
    networks:
      - monitoring-network
      - frontend-network
    depends_on:
      - loki
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 256M

  # Balanceador de carga
  loadbalancer:
    build: ./loadbalancer
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend1
      - backend2
    volumes:
      - ./ssl:/etc/nginx/ssl:ro
    networks:
      - frontend-network
    restart: unless-stopped
    # Añadimos el driver de logs para Loki
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend - React
  frontend:
    build:
      context: ./frontend
      args:
        - REACT_APP_API_URL=/api
    environment:
      - REACT_APP_API_URL=/api
    networks:
      - frontend-network
    restart: unless-stopped
    # Añadimos el driver de logs para Loki
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend 1
  backend1:
    build: ./backend
    env_file:
      - ./backend/.env
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=db
      - FRONTEND_URL=http://frontend
    depends_on:
      db:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    # Añadimos el driver de logs para Loki
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backend 2
  backend2:
    build: ./backend
    env_file:
      - ./backend/.env
    environment:
      - NODE_ENV=production
      - PORT=5000
      - DB_HOST=db
      - FRONTEND_URL=http://frontend
    depends_on:
      db:
        condition: service_healthy
    networks:
      - frontend-network
      - backend-network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
    cap_drop:
      - ALL
    cap_add:
      - NET_BIND_SERVICE
    # Añadimos el driver de logs para Loki
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database
  db:
    image: mysql:8.0
    command: --default-authentication-plugin=mysql_native_password
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: secretpassword
      MYSQL_DATABASE: appdb
      MYSQL_USER: appuser
      MYSQL_PASSWORD: apppassword
    volumes:
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
      - mysql_data:/var/lib/mysql
    networks:
      - backend-network
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uappuser", "-papppassword"]
      interval: 5s
      timeout: 10s
      retries: 10
    # Añadimos el driver de logs para Loki
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Panel de administración para la base de datos
  adminer:
    image: adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - backend-network
    environment:
      - ADMINER_DEFAULT_SERVER=db
    deploy:
      resources:
        limits:
          cpus: '0.25'
          memory: 128M
    # Añadimos el driver de logs para Loki
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Panel de administración para Docker
  portainer:
    image: portainer/portainer-ce:latest
    restart: unless-stopped
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - portainer_data:/data
    security_opt:
      - no-new-privileges:true
    # Añadimos el driver de logs para Loki
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    networks:
      - frontend-network

# Volúmenes para persistencia de datos
volumes:
  mysql_data:
  portainer_data:
  loki_data:
  grafana_data:

networks:
  frontend-network:
    driver: bridge
  backend-network:
    driver: bridge
    internal: true  # Red interna, no accesible desde el exterior
  monitoring-network:
    driver: bridge